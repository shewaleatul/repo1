import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class WeatherApp {
    private static final String API_URL = "https://samples.openweathermap.org/data/2.5/forecast/hourly?q=London,us&appid=b6907d289e10d714a6e88b30761fae22";

    public static String getWeatherData() throws IOException {
        URL url = new URL(API_URL);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        StringBuilder response = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            response.append(line);
        }
        reader.close();
        return response.toString();
    }

    public static double getWeatherByDate(String date, String weatherData) throws JSONException {
        JSONObject jsonObject = new JSONObject(weatherData);
        JSONArray forecasts = jsonObject.getJSONArray("list");
        for (int i = 0; i < forecasts.length(); i++) {
            JSONObject forecast = forecasts.getJSONObject(i);
            if (forecast.getString("dt_txt").contains(date)) {
                return forecast.getJSONObject("main").getDouble("temp");
            }
        }
        return Double.NaN;
    }

    public static double getWindSpeedByDate(String date, String weatherData) throws JSONException {
        JSONObject jsonObject = new JSONObject(weatherData);
        JSONArray forecasts = jsonObject.getJSONArray("list");
        for (int i = 0; i < forecasts.length(); i++) {
            JSONObject forecast = forecasts.getJSONObject(i);
            if (forecast.getString("dt_txt").contains(date)) {
                return forecast.getJSONObject("wind").getDouble("speed");
            }
        }
        return Double.NaN;
    }

    public static double getPressureByDate(String date, String weatherData) throws JSONException {
        JSONObject jsonObject = new JSONObject(weatherData);
        JSONArray forecasts = jsonObject.getJSONArray("list");
        for (int i = 0; i < forecasts.length(); i++) {
            JSONObject forecast = forecasts.getJSONObject(i);
            if (forecast.getString("dt_txt").contains(date)) {
                return forecast.getJSONObject("main").getDouble("pressure");
            }
        }
        return Double.NaN;
    }

    public static void main(String[] args) {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            String weatherData = getWeatherData();

            while (true) {
                System.out.println("1. Get weather");
                System.out.println("2. Get Wind Speed");
                System.out.println("3. Get Pressure");
                System.out.println("0. Exit");
                System.out.print("Enter your choice: ");
                String choice = reader.readLine();

                if (choice.equals("1")) {
                    System.out.print("Enter the date (YYYY-MM-DD HH:mm:ss): ");
                    String date = reader.readLine();
                    double temperature = getWeatherByDate(date, weatherData);
                    if (!Double.isNaN(temperature)) {
                        System.out.println("Temperature on " + date + ": " + temperature + " K");
                    } else {
                        System.out.println("Weather data not available for the given date.");
                    }
                } else if (choice.equals("2")) {
                    System.out.print("Enter the date (YYYY-MM-DD HH:mm:ss): ");
                    String date = reader.readLine();
                    double windSpeed = getWindSpeedByDate(date, weatherData);
                    if (!Double.isNaN(windSpeed)) {
                        System.out.println("Wind Speed on " + date + ": " + windSpeed + " m/s");
                    } else {
                        System.out.println("Weather data not available for the given date.");
                    }
                } else if (choice.equals("3")) {
                    System.out.print("Enter the date (YYYY-MM-DD HH:mm:ss): ");
                    String date = reader.readLine();
                    double pressure = getPressureByDate(date, weatherData);
                    if (!Double.isNaN(pressure)) {
                        System.out.println("Pressure on " + date + ": " + pressure + " hPa");
                    } else {
                        System.out.println("Weather data not available for the given date.");
                    }
                } else if (choice.equals("0")) {
                    System.out.println("Exiting the program.");
                    break;
                } else {
                    System.out.println("Invalid choice. Please try again.");
                }
            }
        } catch (IOException | JSONException e) {
            e.printStackTrace();
        }
    }
}
